The Towers of Hanoi

Three vertical pegs (henceforth “towers”) stand tall. We will label them A, B, and C.
Doughnut-shaped discs are around tower A. The widest disc is at the bottom, and we
will call it disc 1. The rest of the discs above disc 1 are labeled with increasing numerals
and get progressively narrower. For instance, if we were to work with three discs,
the widest disc, the one on the bottom, would be 1. The next widest disc, disc 2, would
sit on top of disc 1. And finally, the narrowest disc, disc 3, would sit on top of disc 2.
Our goal is to move all of the discs from tower A to tower C given the following
constraints:
    - Only one disc can be moved at a time.
    - The topmost disc of any tower is the only one available for moving.
    - A wider disc can never be atop a narrower disc.


Modeling the towers

A stack is a data structure that is modeled on the concept of Last-In-First-Out (LIFO).
The last thing put into it is the first thing that comes out of it. The two most basic
operations on a stack are push and pop. A push puts a new item into a stack, whereas a
pop removes and returns the last item put in. We can easily model a stack in Python
using a list as a backing store.


Solving The Towers of Hanoi

In our three-disc example, we had a simple base case of moving a single disc and a
recursive case of moving all of the other discs (two in this case), using the third tower
temporarily. We could break the recursive case into three steps:
    1 Move the upper n-1 discs from tower A to B (the temporary tower), using C as
    the in-between.
    2 Move the single lowest disc from A to C.
    3 Move the n-1 discs from tower B to C, using A as the in-between.
